generator client {
  provider      = "prisma-client-js"
  output        = "../lib/generated/prisma"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Spot {
  spotId    Int      @id @default(autoincrement())
  name      String
  address   String
  genre     String
  imageUrl  String   @map("image_url")
  createdAt DateTime @default(now()) @map("created_at")
  events    Event[]
}

// 投票イベント全体を管理するテーブル
model Event {
  eventId   Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  spotId    Int
  spot      Spot     @relation(fields: [spotId], references: [spotId])
  
  // 1つのイベントは、複数の候補日を持つ
  dates     CandidateDate[]
}

// イベントに紐づく「候補日」を管理するテーブル
model CandidateDate {
  dateId    Int      @id @default(autoincrement())
  date      DateTime // 候補日の日付
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [eventId])

  // 1つの候補日は、複数の投票を持つ
  votes     Vote[]
}

// 個々の「投票」を管理するテーブル
model Vote {
  voteId    Int      @id @default(autoincrement())
  user      String   // 投票した人の名前
  vote      Boolean  // true: 〇, false: ✕
  dateId    Int
  date      CandidateDate @relation(fields: [dateId], references: [dateId])
}
